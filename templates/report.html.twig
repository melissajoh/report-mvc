{% extends "base.html.twig" %}

{% block title %}About{% endblock %}

{% block body %}
<h1>Redovisningstexter</h1>
<h2 id="kmom01">Kmom01</h2>
<pre>
Den erfarenhet jag har av objektorientering sedan tidigare är väl främst
kursen som precis gick i Objektorienterad python. Där jobbade vi med att 
skapa olika klasser såsom “dice” och “hand” i ett yatzy-spel och “node” 
och “trie” i en trädstruktur, där man jobbade med olika metoder och 
attribut inuti de olika klasserna.

För att skapa en klass i PHP använder man nyckelordet “class” följt av 
klassnamn som börjar på stor bokstav och sedan måsvingar för tillhörande 
kod. Metoder och medlemsvariabler i klassen skapas genom att ange om den 
ska vara public, private eller protected följt av vilken typ (function, 
string osv) och namn ($ före för variabel, () i slutet för metod). Ett 
objekt skapas genom att ange till exempel $namn = new Klassnamn();. För 
att komma åt ett objekts “properties” använder man ->, exempelvis 
$namn->age om ett objekt har ett “age-property”.

Koden för me/report uppfattar jag som okej så här långt. Det är mycket 
filer men det kändes logiskt var de filer vi behövde arbeta med för uppgiften 
skulle ligga. Så jag hade inga större besvär.

I “PHP The Right Way” tyckte jag att delen om hur man hanterar strängar 
var intressant. Detta då jag minns tydligt från webtec-kursen då man 
försökte hantera olika tecken och få allt rätt. Men då hittade jag 
exempelvis inte lika direkt informationen att man bör använda mb_*-
versionen av sträng-funktionen, eller UTF-8-hantering som det står lite om. 
Har ingen mer specifik del att lyfta fram men överlag tror jag att det går 
att hitta bra information där om man letar efter något specifikt.

TIL för detta kursmoment är att installera och använda ramverket Symfony 
och grund i hur man jobbar med klasser och objekt i PHP.
</pre>

<h2 id="kmom02">Kmom02</h2>
<pre>
Arv innebär att en klass ärver av en annan klass, dvs den får samma publika 
delar som klassen den ärver av. Klassen som ärver kan sedan innehålla egna 
metoder eller skriva över metoder från basklassen. Komposition innebär att 
en klass använder sig av en annan klass. Som för våra kort, där en korthand 
eller kortlek använder sig av kort. Ett interface är som ett kontrakt där en 
klass lovar att innehålla vissa metoder. Interface innehåller ingen kod som en 
klass kan använda, utan enbart löfte om vilka metoder som ska finnas. Trait är 
återanvändbara delar kod som kan användas i olika klasser.

Jag löste uppgiften med hjälp av fyra klasser. Card, CardGraphic, CardHand och 
DeckOfCards. I Card skapas kort som ska ha ett värde mellan 0-51 (52 kort i 
en kortlek). Jag har där en metod som initierar korten genom att ett nummer 
skickas till metoden. Där kort används kan de alltså initieras genom antingen 
ett slumpmässigt värde mellan 0-51 eller genom att loopa igenom alla siffrorna 
för att få fram alla korten. CardGraphic gör korten till bilder (unicode) av 
kort istället för enbart siffror.

Jag har sedan använt DeckOfCards för att få fram en kortlek, kunna blanda den, 
ta bort kort från den osv. I CardHand tar jag fram en korthand till routen 
deck/draw/:number genom metoden draw.

Överlag känner jag att min lösning på uppgiften blev ganska rörig. Nog för att 
jag blev lite förvirrad över hur jag skulle lösa allting. Jag är inte jättenöjd. 
Vad jag märkt så fungerar allt som det ska, men jag känner mig lite osäker på om 
min kod håller för fortsättning i kommande kursmoment.

För att lösa routen “draw” skapade jag en metod draw i DeckOfCards som tar fram 
ett kort som dras och tas bort ur leken. Men för routen “draw/:number” använder 
jag istället en ytterligare “draw”-metod men i klassen CardHand, som i sin tur 
tar ett DeckOfCards-objekt som argument. För att ta bort korten anropas en 
ytterligare metod i DeckOfCards. Det känns som att det hade kunnat gå att använda 
samma draw-metod för dessa två. Men av någon anledning gjorde jag två olika och 
lyckades inte riktigt få ihop dem till en när jag försökte nu. Men det skulle 
vara en förbättring.

TIL för detta kursmoment är lite inledande information om för mig nya 
konstruktionerna interface och trait. Att jobba med klasser och sessioner i PHP.
</pre>

<h2 id="kmom03">Kmom03</h2>
<pre>
När jag först skulle göra flödesdiagram och pseudokod kändes det jobbigt. 
Detta troligen för att jag inte känner mig säker på programmering ännu och 
det kändes svårt att veta vad jag skulle behöva göra. Men efter att jag fått 
fundera igenom uppgiften lyckades jag ändå skapa ett flödesdiagram och pseudokod. 
Vilket kändes ganska bra ändå. Det kändes som att det absolut skulle kunna fungera 
som bra stöd i att ta sig an olika programmeringsuppgifter och det tvingade mig 
att faktiskt tänka igenom innan jag satte igång.

Jag löste uppgiften med hjälp av de klasser jag gjort i tidigare kursmoment 
samt två nya klasser. Dessa döpte jag till Player och GameBoard. Player håller 
en spelare med spelarens poäng samt en mängd pengar. GameBoard är själva spelplanen, 
där en spelare och banken initieras tillsammans med en kortlek, nuvarande korthand 
och det senaste dragna kortet. I denna klass finns metoder som drar ett kort, 
flera get-metoder som visar till exempel nuvarande hand, en metod som räknar ut 
poängen för varje kort, metoder för funktionalitet när spelaren eller banken drar 
kort, metod för statistik och att avsluta spelet.

Jag började att göra alla grundläggande krav för kortspelet 21 och fortsatte 
sedan arbeta med spelet med den tid som blev över. Jag lade då till satsning 
av pengar, statistik och smartare bank samt stylade spelet. Jag valde att 
visa ställningen på spelplanen, med rundans poäng, antal rundor spelaren 
respektive banken vunnit och varje spelares pengamängd. Spelet sker i rundor, 
där någon vinner varje runda. Spelet tar sedan slut antingen när någon har slut 
på pengar eller när kortleken är slut. Då är den slutgiltiga vinnaren den som 
vunnit flest gånger (och då även har mest pengar kvar).

Förbättringspotential är till exempel hur satsningen av pengar går till. Nu 
får man välja en mängd pengar som satsas varje runda innan spelet startas. Kanske 
hade det varit bättre om man fick satsa pengar inför varje runda. Sättet jag har 
implementerat satsningen på just nu gör det inte så troligt att man hinner förlora 
alla pengar innan kortleken tar slut om man satsar en för låg summa i början. Det 
gör också att den som vinner flest antal rundor automatiskt är den som har mest 
pengar, då den ena förlorar pengarna och den andra får samma mängd pengar.

Mer förbättringspotential är väl själva koden och strukturen på den. Jag har 
försökt minimera koden i Controllern, men det blev kanske lite mycket i 
play-metoden. Detta främst då jag använt mig av flash-meddelanden och inte kom 
på något annat sätt än att jobba med funktionaliteten av dessa i controllern. 
Det finns säkert saker som kan göras på ett smartare och “renare” sätt också. 
Men det känns överlag okej.

Att koda i ett ramverk som Symfony känns bra. Det känns som en bra grej att ha 
möjlighet att använda för att slippa skriva allting från början varje gång någonting 
ska programmeras.

TIL för det här kursmomentet är att använda phpmd och phpstan, hur man kan 
bygga upp ett kortspel, att skriva flödesdiagram och pseudokod.
</pre>

<h2 id="kmom04">Kmom04</h2>
<pre>
Jag tyckte att det kändes helt okej att skriva testkod med PHPUnit. Det hjälpte 
att vi fick prova testning i en tidigare Python-kurs så att man en liten aning 
om hur det går till. Det var samma princip som då med att namnge filer, klasser 
och metoder med “test” och sedan använda olika asserts. Jag har inte så mycket 
att säga om PHPUnit rent allmänt, det fungerade bra. Som vanligt är det lite klurigt 
att få fram vad man söker i manualen, men bra träning att läsa i den.

Jag fick 100% kodtäckning på min kod. Men hur vältestad den är, är jag lite osäker 
på. Jag har försökt tänka på att göra värdefulla tester och testa det som behövs. 
Men det är inte det lättaste. Jag provade också att testa Controllers, men jag 
tyckte att det var svårt att hitta information kring hur man gör. De få tester 
jag lyckades skriva känns inte super-värdefulla. Men det var kul att försöka lite 
i alla fall.

Delar av min kod känns absolut som “testbar” kod och det gick smidigt att skriva 
tester. Andra delar var väldigt kluriga att lyckas testa. Jag försökte använda lite 
mock och sådant, men det gick inget vidare. Det slutade med att jag skrev om några 
metoder för att de skulle bli enkla att testa. Detta till exempel i form av att jag 
kortade ner en if-sats i metoden endGame i GameBoard-klassen, så att den nu endast 
har två returns istället för fyra. Jag lade även till in-parametrar på ett par 
ställen som jag satte till default-värde “null” för att få möjlighet att skicka med 
värden i mina tester. Detta gjorde att jag fick lägga till en extra if-sats i dessa 
metoder (endGame och checkEmptyDeck i GameBoard-klassen) för att sätta variabel-värde 
på dessa när man inte skickar med värden.

Mina ändringar gjorde min kod enklare att testa, på vissa ställen snyggare men på 
andra ställen inte. Den förstnämnda ändringen kändes som en förbättring som 
bidrog till snyggare och renare kod, men just lösningen som skapade en extra if-sats 
tyckte jag inte blev så snygg. Så jag vet inte riktigt om testbar kod alltid innebär 
“snygg och ren kod”. Kanske ofta men ibland inte.

TIL för detta kursmoment lite testning i PHPUnit, få fram och titta på kodtäckning, 
generera dokumentation av koden med phpdoc.
</pre>

<h2 id="kmom05">Kmom05</h2>
<pre>
Det gick bra att jobba igenom övningen. Jag fastnade lite när databasen skulle skapas 
och jag fick felmeddelande “Could not find driver” trots att jag följt övningen och 
gjort alla steg. Men jag fick hjälp med det i discord och det löste sig genom att köra 
“sudo apt install php8.2-sqlite3” i terminalen. Annars fungerade det bra.

När jag byggde ihop mitt bibliotek tänkte jag på att alla sidor skulle länkas samman. 
Jag har landningssidan som välkomnar till biblioteket. Därifrån kan man sedan gå vidare 
för att se en lista med alla böcker eller välja att lägga till en bok. Från sidan med 
alla böcker, vilka ligger i en tabell, kan man sedan klicka sig vidare till en bok. 
Därifrån kan man i sin tur uppdatera eller radera den aktuella boken. Så jag tycker 
att jag fick med alla delar i ett flöde.

Det gick bra att jobba med ORM i CRUD. Jag stötte inte på några större problem. Det 
som kändes lite konstigt var att inte skriva någon SQL-kod för att få fram, lägga till, 
uppdatera och radera saker från databasen. Men det gjorde ju att mindre kod behövde 
skrivas från min sida, så det var ju skönt. Det känns hittills som ett smidigt sätt 
att arbeta mot en databas. Om man jämför mot hur vi arbetade i databas-kursen, där 
man behövde skriva väldigt mycket kod för att göra samma sak som vi gjorde nu – så 
känns det ju helt klart mindre tidskrävande om inte annat.

TIL för detta kursmoment är ett annat sätt att jobba med databaser, genom ORM.
</pre>

<h2 id="kmom06">Kmom06</h2>
<pre>
PHPmetrics uppfattade jag inte som att det gav mig lika mycket som Scrutinizer 
för just detta projekt. Jag hade 4 violations som jag inte lyckades klura ut 
hur de skulle lösas. Resten av värdena tyckte jag var lite kluriga att få ut 
någonting av. Det som kändes värdefullast var bilden med cirklarna där man kunde 
se komplexitet och hur lätt en klass skulle bli att underhålla.

Efter mitt första lyckade bygge med Scrutinizer fick jag betyg 9.88 och kodtäckning 
29%. Jag hade då tagit bort mina tester för controllers då dessa gjorde att bygget 
av Scrutinizer-rapporten inte lyckades. Jag lyckades dock få in dem igen senare. 
Mina sämsta betyg på klasser och operationer var tre stycken operationer med betyg 
B, varav en av dessa hade en CRAP-score på 90.

Att arbeta med Scrutinizer fungerade men jag kämpade lite med att till exempel 
lägga till mina tester för controllers, vilka klagade på att build/entrypoints.json 
inte fanns (vilket den inte heller gjorde i github insåg jag sen) och att lägga 
till mina tester för Book då dessa pratade med min databas-fil som inte heller 
fanns i github. Så jag gjorde ganska många försök att lägga till dessa, vilket 
ledde till många commits och push till github. Men överlag känns det som ett bra 
verktyg som kan hjälpa en att se vad som kan förbättras i ens kod.

Några ändringar jag gjorde för att göra min GameController bättre enligt scrutinizer 
gör att phpmd klagar på användandet av “SuperGlobals”. Detta har jag sett men lyckades 
inte lösa det och valde att behålla ändringarna ändå då de gav bättre betyg i 
scrutinizer.

Till viss del kan man säkert påvisa kodkvalitet med badges. Det går ju till exempel 
att med en badge om låg kodtäckning se att koden inte testas. Högt Scrutinizer-betyg 
kan ju också visa att klasser och metoder har höga betyg och kanske inte är för 
komplexa eller på annat sätt problematiska. Jag tänker att kodkvalitet är när koden 
är lätt att följa med i, lätt att underhålla, gör vad den ska och inte ställer till 
med oväntade saker.

TIL för detta kursmoment är att använda PHPmetrics och Scrutinizer för att analysera 
min kod och se vad som kan förbättras.
</pre>
<h2 id="kmom10">Kmom10</h2>
<pre>
<h3>REDOVISNINGSTEXT KMOM10/PROJEKT MVC</h3>
Jag valde att arbeta med ett äventyrsspel och har försökt få till alla projektets 
krav. Jag hade lite strul med sessioner på studentservern, men för mig fungerar 
spelet som det ska om man antingen kör det i en inkognitoflik eller använder https://.

<h4>KRAV</h4>
<h5>Krav 1-3: Webbplats</h5>
Jag började med att skapa en landningssida /proj som man kommer åt genom report-sidans 
navbar. Väl där byts navbaren ut enligt krav och innehåller bara länkar relevanta 
för projektet. Jag har gjort en egen stylesheet för projektet som används i en 
proj_base.html.twig-fil, vilken är den som alla projektets template-filer “extendar” 
från. Istället för den base.html.twig vi har använt oss av tidigare. Stilen har jag 
tänkt mig lite 8-bit-spel, skräcktema med det mörka och röd text i footer och länkar. 
Jag har även själv ritat bilderna för varje rum, anpassade till spelet.

Det var lite klurigt att komma på hur jag skulle implementera styrningen av spelet. 
I uppgiftsbeskrivningen står det “Varje gång man klickar på något…”. Men jag tänkte 
att det var lite fritt att lösa spelets funktionalitet. Jag ville gärna att man skulle 
kunna skriva in vad man vill göra, då det är så jag tänker mig denna typ av spel. Jag 
funderade också på om jag skulle lägga fyra knappar som alternativ på vad man kunde 
göra i rummet istället. Men sedan löste jag det genom ett formulär med gömd knapp. 
Detta gör att sidan laddas om när formuläret skickas och det kan bli lite hoppigt. 
Men det fungerar. Rutan där kommandot skrivs in använde jag “autofocus” på så markören 
befinner sig där hela tiden. Sedan är det bara att skriva kommando och skicka med enter. 
Bilderna ändras inte när ett föremål plockas upp, utan jag valde att ha stilla bilder och 
istället berätta vad som sker i texten.

Jag skapade tre nya klasser som jag använder mig av under src/Proj. Dessa är Actions, 
Backpack och Room. Actions håller alla olika handlingar man kan utföra i spelet, 
exempelvis “gå” och “ta”. Backpack håller de föremål spelaren plockar upp. Room är 
lite special och håller just nu bara metoder för att kolla om ett rum är låst åt de 
olika riktningarna. Resten av delarna som är relaterade till rum och föremål i rummen 
finns i databasen och mycket av det hanteras i Actions-klassen. Jag skriver lite mer 
om databasen under Krav 5.

De handlingar som finns är  “gå”, “ta”, “använd”, “lyft” och “öppna”. Vissa föremål 
går att plocka upp, andra går att lyfta, några går att använda och ett föremål att öppna. 
Egentligen borde “öppna” kanske ha fungerat på den låsta väg som finns i spelet, men 
just nu räcker det att man har rätt föremål med sig i ryggsäcken för att kunna gå igenom 
den låsta vägen. Jag har heller inte gjort så att ett föremål försvinner från ryggsäcken 
eller på något sätt uppdateras om det används, vilket skulle kunna vara en förbättring.

Koden försökte jag skriva så “icke-hårdkodat” som möjligt och jag tror att det är möjligt 
att lägga till fler rum utan allt för mycket jobb.

Under proj/about har jag skrivit lite vilken projektidé jag valde, hur man spelar och 
lite kort hur spelet är uppbyggt.

Jag har använt mig av samma repo på github som vi haft under hela kursen. Där ligger en 
README.md med alla badges och nu även en instruktion till hur man klonar repot. Det 
fungerade för mig att köra de kommandon som jag skrivit ned, så jag hoppas att det är 
rätt. Provade några gånger och en av gångerna fick jag ett error som jag sedan inte 
fick fler gånger fast jag gjorde likadant, så jag är lite osäker. Scrutinizer, docs och 
metrics innehåller alla me/report-filerna och inte enbart projektet. För att få upp 
kodtäckningen lite exkluderade jag några av de filer som inte var relevanta för projektet, 
som BookController och CardController – vilka jag inte lyckades testa. Tänkte att detta 
var okej då det i uppgiftsbeskrivningen står “exkludera filer som inte är relevanta” och 
dessa inte är relevanta för projektet just. Jag har fortfarande kvar till exempel 
GameController vilken hör till kortspelet och alltså inte projektet, som bara har 53 % 
i kodtäckning. Exkluderas även den, blir kodtäckningen lite högre. Men totalt ligger den 
ändå på 92%.

Jag skrev tester för alla nya filer, som ProjectController och filerna i mapperna 
Entity och Repository, samt klass-filerna i min src/Proj. Jag lade även till ett par 
tester till gamla filer som inte har med projektet att göra. Överlag gick det rätt bra 
med testerna men jag fick använda en del mockning för att kunna testa koden.

<h5>Krav 4: JSON API</h5>
För JSON API:et skapade jag en route proj/api där det finns länkar till alla api-routes 
och en kort förklaring om vad routen gör. Jag valde att göra 5 routes. En route som visar 
spelarens ryggsäck, vilken är tom om spelet inte har startats alt ingenting har plockats 
upp. Sedan finns en route som visar namn och beskrivning på alla rum och samma sak för 
alla föremål. För föremålen har jag en till route som visar ett föremål baserat på dess 
id. Den sista routen är en POST-route som lägger till ett föremål i “items”-tabellen, 
förutsatt att föremålet inte redan har lagts till. Den routen lägger alltså bara till 
ett föremål en gång, men går att testa flera gånger genom att gå till proj/reset vilket 
är återställning av databasen.

<h5>Krav 5: ORM</h5>
Jag implementerade databas via ORM tidigt i projektet. Jag valde att använda samma 
data.db-fil som genererades under tidigare kursmoment. Sedan har jag byggt databasen på 
samma sätt, genom att köra `php bin/console make:entity`, skapa, köra och applicera 
migrationer osv. Under proj/about/database finns närmare beskrivning av databasen, som 
ER-diagram och svar på de frågor som finns under kravet.

Databasen blev en central del i mitt spel, då jag använde den till att exempelvis se 
vilka håll som går att gå från varje rum, se om någon väg är låst och vilket föremål 
som isåfall behövs för att öppna rummet. Jag har alla föremål som är interagerbara i 
en egen tabell, där plats föremålet finns på ligger i databasen – tillsammans med annan 
information så som om föremålet går att plocka upp, om det är gömt och text som dyker 
upp om man interagerar med föremålet.

<h5>Krav 6: Avancerade features</h5>
<b>Databastabeller:</b> Till en början fick jag klura en del på vad som skulle bli tabeller 
i databasen och hur databasen skulle fungera tillsammans med egna klasser på ett bra 
sätt. Jag satt och skrev ner och funderade mycket innan jag satte igång. Det var svårt 
att tänka sig vad som kunde vara relevant information att ha i en databas för ett 
sådant här spel som jag aldrig kodat förut. Först var det lite klurigt att tänka vilka 
tabeller, ska rum vara en tabell eller vore det bättre att ha klasser som tar hand om 
arje rum? Sedan när jag väl kommit fram till att rum och föremål bör vara tabeller, så 
var det klurigt att tänka sig vad för kolumner som behövdes i varje tabell. Detta byggdes 
på vartefter jag började koda, men till en början fanns de grundläggande delarna som id, 
beskrivningar och antingen håll att gå eller rum ett föremål fanns i. Detta bör räknas 
in i krav 6 då databas inte fanns med i baskraven.

<b>Reset av databasen:</b> Jag hade också lite svårigheter med att återställa databasen. Under 
databas-kursen jobbade vi ju med SQL-kod som placerades i filer och enkelt kunde köras 
för att återbygga databasen. Här visste jag inte riktigt hur det skulle göras. Tillslut 
lyckades jag skapa en proj/reset-route som återställer databasen till sitt ursprungsläge 
(där alla delar som behövs för spelet finns men inte till exempel det item som lagt till 
under proj/api/add). Detta genom tips jag hittade i discord-tråden för kursen och genom 
att göra en “dump” av databasen vilket innebär att databasen läggs som SQL-kod i en fil. 
Dock fick jag då errors i phpstan som ledde till ytterligare svårigheter. Detta bör 
räknas i krav 6 då ingen sådan reset av databasen hade behövts om jag inte jobbat med 
krav 5 om databas via ORM.

<b>JSON API:</b> Det var också lite klurigt vilka routes jag skulle ha med för JSON API:et. 
ärskilt en post-route. Jag tänkte att jag inte ville ha routes som till exempel tar bort 
eller ändrar någonting av det som finns i databasen, då det är delar som behövs för 
spelet. Tillslut skapade jag routes för att visa alla relevanta databas-delar, samt 
ryggsäck och sedan en post-route som lägger till ett föremål en gång. Detta bör räknas 
in i krav 6 då JSON API var ett optionellt krav.

<b>Tester för controllers:</b> Jag försökte också testa mina controllers, vilket jag tänker 
bör räknas in i krav 6 då vi inte har lärt oss att testa controllers och det mer är 
en extragrej jag valt att göra. För just projektet har jag två nya controllers 
ProjectController och ProjJsonController. I båda stötte jag på några saker som var 
svåra att testa och tog tid att lösa. I ProjectController är det att testa med ett 
inkommande request från formulär, samt att testa min reset-route då den inte ville 
hitta filen jag använder där. Dessa lyckades jag dock lösa efter lite kämpande. 
Det första problemet gav dock ett error i phpstan som jag inte lyckades lösa. I 
ProjJsonController hade jag svårigheter att klura ut hur jag kunde mocka 
ItemsRepository så den inte hittar något item. Detta löste sig för den ena routen 
(proj/api/add), men för routen för “single_items” som även kastar ett exception 
lyckades jag inte testa just den biten. Att jag provat att testa controllers i tidigare 
kursmoment gjorde att resten av testerna gick ganska smidigt. De tester jag skrivit är 
inte de mest innehållsrika, men de testar controllerna lite grann i alla fall. Jag 
landade på 100 respektive 95.83 % kodtäckning för dessa tillslut.

<h4>ALLMÄNT</h4>
Projektet har gått helt okej att genomföra. Det var klurigt då jag valde att göra 
ett äventyrsspel och inte har någon tidigare erfarenhet av att skapa ett sådant 
spel. Till en början kändes allting svårt. Hur skulle styrningen av spelet gå till? 
Vilka klasser behövde jag? Vad skulle finnas i databasen? Det kändes som att det 
skulle bli väldigt svårt att utföra, men jag valde ändå projektidén då jag tyckte 
att det lät absolut roligast. 

Efter en vecka hade jag lyckats få till ett fungerande men väldigt litet spel. 
Jag valde att jobba med bara tre rum då jag ville ha så lite delar att fokusera på 
som möjligt till en början. Det gick förvånansvärt bra att skriva koden för spelet 
(Controller och klasser) ändå, kanske för att jag hade tänkt igenom uppgiften ganska 
mycket innan jag satte igång. Efter den första veckan började jag med tester och 
insåg att mitt spel var svårt att testa, vilket gjorde att jag fick skriva om några 
bitar – dock inte alls så mycket som jag först befarade. Så testerna gick ändå bra 
att skriva.

Jag hade en del errors i composer lint som jag också fick försöka lösa. Nu klagar 
phpstan på tre errors som jag inte lyckades hitta en lösning på men jag hoppas att 
det går att överse. Phpmd klagar också på ett par fel från tidigare kortspel och 
ett fel om “ShortMethodName” trots att jag tagit med det namnet i konfigurationsfilen. 
Annars går mina tester igenom och jag har fixat issues i Scrutinizer.

Överlag kändes det som ett rimligt projekt för kursen. Det var bra att man hade 
olika valmöjligheter och kunde göra det svårare eller lättare för sig själv med val 
av projektidé. Jag kände spontant att äventyrsspelet nog var lite för svårt, men jag 
kunde inte hålla mig från att prova. Jag hann ändå med projektet nästan på utsatt tid, 
jag är en dag sen.

<h4>KURSEN</h4>
Kursen har varit bra. Genomgångarna med Mikael och en start på övningarna har 
varit en bra början på varje kursmoment. Det har funnits bra föreläsningar varje 
vecka och bra länkar att läsa vidare via. Jag är överlag nöjd med kursen och har 
ingenting att klaga på. Skulle kunna rekommendera den. Betyg 8/10.

</pre>
{% endblock %}
